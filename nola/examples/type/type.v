(** * [type]: Syntactic type *)

From nola.util Require Export ctx nat.

(** ** [tcon0]: Nullary type constructor *)
Variant tcon0 : Set :=
| (* Natural-number type *) tc_nat
| (* Boolean type *) tc_bool
| (* Unit type *) tc_unit
| (* Trivial type *) tc_any.

(** ** [tcon2]: Binary type constructor *)
Variant tcon2 : Set :=
| (* Intersection type *) tc_and
| (* Pair type *) tc_pair.

(** ** [type]: Syntactic type *)
Inductive type : nat โ ctx nat โ Set :=
(** Nullary type *)
| t_0 {i ฮ} (c : tcon0) : type i ฮ
(** Binary type *)
| t_2 {i ฮ} (c : tcon2) (T U : type i ฮ) : type i ฮ
(** Terminating function type *)
| t_fun {i ฮ} (j : nat) `{ji : ! j โคโฟ i} (T U : type i ฮ) : type i ฮ
(** Guard type *)
| t_guard {i j ฮแต ฮแต} (T : type j (;แต ฮแต ++ ฮแต)) : type i (ฮแต;แต ฮแต)
(** Reference type with an offset [o] *)
| t_ref {i j ฮแต ฮแต} (o : Z) (T : type j (;แต ฮแต ++ ฮแต)) : type i (ฮแต;แต ฮแต)
(** Universal and existential type *)
| t_forall j {i ฮแต ฮแต} (T : type i (j :: ฮแต;แต ฮแต)) : type i (ฮแต;แต ฮแต)
| t_exist j {i ฮแต ฮแต} (T : type i (j :: ฮแต;แต ฮแต)) : type i (ฮแต;แต ฮแต)
(** Recursive type *)
| t_rec j {i ฮแต ฮแต} `{ji : ! j โคโฟ i}
    (T : type j (j :: ฮแต;แต ฮแต)) : type i (ฮแต;แต ฮแต)
(** Ignore the first unguarded/guarded variable *)
| t_constu {i j ฮแต ฮแต} (T : type i (ฮแต;แต ฮแต)) : type i (j :: ฮแต;แต ฮแต)
| t_constg {i j ฮแต ฮแต} (T : type i (ฮแต;แต ฮแต)) : type i (ฮแต;แต j :: ฮแต)
(** Guarded variable *)
| t_varg {i ฮแต ฮแต} (s : schoice ((.โคโฟ i)) ฮแต) : type i (ฮแต;แต ฮแต)
(** Unguarded variable *)
| t_varu {i ฮแต ฮแต} (s : schoice ((.<โฟ i)) ฮแต) : type i (ฮแต;แต ฮแต)
(** Substituted [t_varu] *)
| t_subu {i j ฮ} `{ji : ! j <โฟ i} (T : type j (;แต)) : type i ฮ.

Notation "โจโโฉ" := tc_nat : nola_scope.
Notation โ := (t_0 โจโโฉ).
Notation "โจ๐นโฉ" := tc_bool : nola_scope.
Notation ๐น := (t_0 โจ๐นโฉ).
Notation "โจ๐โฉ" := tc_unit : nola_scope.
Notation "๐" := (t_0 โจ๐โฉ) : nola_scope.
Notation "โจโคแตโฉ" := tc_any : nola_scope.
Notation "โคแต" :=  (t_0 โจโคแตโฉ) : nola_scope.
Notation "โจโงแตโฉ" := tc_and : nola_scope.
Infix "โงแต" := (t_2 โจโงแตโฉ) (at level 55, right associativity) : nola_scope.
Notation "โจรโฉ" := tc_pair : nola_scope.
Infix "ร" := (t_2 โจรโฉ) (at level 50, left associativity) : nola_scope.
Notation "T โ( j ) U" := (t_fun j T U)
  (at level 55, right associativity, format "T  โ( j )  U") : nola_scope.
Notation "T โ{ ji } ( j ) U" := (t_fun j (ji:=ji) T U)
  (at level 55, right associativity, only parsing) : nola_scope.
Notation "โฝ{ j , ฮแต } T" := (t_guard (j:=j) (ฮแต:=ฮแต) T)
  (at level 20, right associativity, only parsing) : nola_scope.
Notation "โฝ T" := (t_guard T) (at level 20, right associativity) : nola_scope.
Notation "ref{ j , ฮแต } [ o ] T" := (t_ref o (j:=j) (ฮแต:=ฮแต) T)
  (at level 20, right associativity, only parsing) : nola_scope.
Notation "ref[ o ] T" := (t_ref o T)
  (at level 20, right associativity, format "ref[ o ]  T")
  : nola_scope.
Notation "ref{ j , ฮแต } : T" := (t_ref 0 (j:=j) (ฮแต:=ฮแต) T)
  (at level 20, right associativity, only parsing) : nola_scope.
Notation "ref: T" := (t_ref 0 T) (at level 20, right associativity)
  : nola_scope.
Notation "โ: j , T" := (t_forall j T) (at level 100, right associativity)
  : nola_scope.
Notation "โ: j , T" := (t_exist j T) (at level 100, right associativity)
  : nola_scope.
Notation "recแต: j , T" := (t_rec j T) (at level 100, right associativity)
  : nola_scope.
Notation "recแต:{ ji } j , T" := (t_rec j (ji:=ji) T)
  (at level 100, right associativity, only parsing) : nola_scope.
Notation "ยขแต{ ฮแต } T" := (t_constu (ฮแต:=ฮแต) T)
  (at level 20, right associativity, only parsing) : nola_scope.
Notation "ยขแต T" := (t_constu T) (at level 20, right associativity)
  : nola_scope.
Notation "ยขแต{ ฮแต } T" := (t_constg (ฮแต:=ฮแต) T)
  (at level 20, right associativity, only parsing) : nola_scope.
Notation "ยขแต T" := (t_constg T) (at level 20, right associativity)
  : nola_scope.
Notation "%แต s" := (t_varg s) (at level 20, right associativity) : nola_scope.
Notation "%แต s" := (t_varu s) (at level 20, right associativity) : nola_scope.
Notation "!แต T" := (t_subu T) (at level 20, right associativity) : nola_scope.
Notation "!แต{ ji } T" := (t_subu (ji:=ji) T)
  (at level 20, right associativity, only parsing) : nola_scope.

(** ** [โแต T]: Bump the level [i] of a type [T] *)
Reserved Notation "โแต T" (at level 20, right associativity).
Fixpoint tbump {i j ฮ} (T : type i ฮ) : i โคโฟ j โ type j ฮ :=
  match T with
  | t_0 c => ฮป _, t_0 c | t_2 c T U => ฮป _, t_2 c (โแต T) (โแต U)
  | T โ(j) U => ฮป ij, let _ := nle_trans _ ij in โแต T โ(j) โแต U
  | โฝ T => ฮป _, โฝ T | ref[o] T => ฮป _, ref[o] T
  | โ: j, T => ฮป _, โ: j, โแต T | โ: j, T => ฮป _, โ: j, โแต T
  | recแต: j, T => ฮป ij, recแต:{nle_trans _ ij} j, T
  | ยขแต T => ฮป _, ยขแต โแต T | ยขแต T => ฮป _, ยขแต โแต T
  | %แต s => ฮป ij, %แต (strans (ฮป _ ki, nle_trans ki ij) s)
  | %แต s => ฮป ij, %แต (strans (ฮป _ ki, nlt_nle_trans ki ij) s)
  | !แต T => ฮป ij, !แต{nlt_nle_trans _ ij} T
  end
where "โแต T" := (tbump T _) (format "โแต  T") : nola_scope.

Notation "โแต{ ij } T" := (tbump T ij)
  (at level 20, right associativity, only parsing) : nola_scope.

(** [โแต] is idempotent *)
Lemma tbump_tbump `{ij : ! i โคโฟ j, jk : ! j โคโฟ k, ik : ! i โคโฟ k}
  {ฮ} {T : type i ฮ} : โแต{jk} โแต{ij} T = โแต{ik} T.
Proof.
  move: i j k ฮ T ij jk ik. fix FIX 5=> i j k ฮ.
  case=>//=; intros; f_equal; try apply FIX;
    try (rewrite strans_strans; apply strans_cong=>/= >); apply proof_irrel.
Qed.
